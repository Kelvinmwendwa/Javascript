{
	"info": {
		"_postman_id": "c51dcaaf-2401-4f8e-8dc7-2a6fd5d674dc",
		"name": "proj1-situ",
		"description": "This collection tests the API specification given for Assignment 4.\nIn order to run this collection, you need an environment which has the following 3 environment variables pre-defined:\n\napp_url\n- Set this to your app. E.g., when running locally set it to http://localhost:8080. When running the app on GCP. set it to https://myapp.appsport.com\n\ninvalid_load_id\n- Set it to a value that's not an ID of any boat in your project. I have set it to 1 and that should work for you as well.\n- \n\ninvalid_load_id\n- Set it to a value that's not an ID of any slip in your porject. I have set it to 1 and that should work for you as well.\n",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "get users 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "31571c91-eeb2-46e3-8a03-5f7f45140877",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Content is Type JSON\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"pm.test(\"users have user_id property\", function () {",
							"    var users = pm.response.json();",
							"    for (var i = 0; i < users.length; i++) {",
							"        pm.expect(users[i]).to.have.property(\"user_id\");",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "27b46945-f6f5-4552-a224-1dbd5aaddcca",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/users",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete boats not allowed 405",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b2be7018-cb45-4fe8-aaa5-cd2d870849a2",
						"exec": [
							"pm.test(\"405 invalid jwt\", function () {",
							"    pm.response.to.have.status(405);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "b354d067-920f-4b4a-9dfa-efd655feabac",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete loads not allowed 405",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e5976fc3-a87a-445c-a313-3af5373ac436",
						"exec": [
							"pm.test(\"405 invalid jwt\", function () {",
							"    pm.response.to.have.status(405);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "b909b53a-2f7e-409d-82c0-814e237a90f6",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads"
					]
				}
			},
			"response": []
		},
		{
			"name": "Patch loads not allowed 405",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a43e844e-852e-431b-8bf0-c6ad44a18feb",
						"exec": [
							"pm.test(\"405 invalid jwt\", function () {",
							"    pm.response.to.have.status(405);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "876cb037-f494-4996-9a7b-be4f58d80fb9",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PATCH",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads"
					]
				}
			},
			"response": []
		},
		{
			"name": "Send XML (masked as json) to add boat 415",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5e636d5a-ee0c-4d89-b086-95aa7a69b290",
						"exec": [
							"pm.test(\"415 status code\", function () {",
							"    pm.response.to.have.status(415);",
							"});",
							"",
							"pm.test(\"415 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Only Accept application/json\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "77cf3750-3cda-4e20-a230-7a0efaa2c4c6",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\r\n<root>\r\n  <name>Odyssey</name>\r\n  <type>Yatch</type>\r\n  <length>99</length>\r\n</root>",
					"options": {
						"raw": {
							"language": "xml"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "add boat accept: application/text 406",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4db7222f-578d-409d-8018-379b1a73b1ec",
						"exec": [
							"pm.test(\"406 status code\", function () {",
							"    pm.response.to.have.status(406);",
							"});",
							"",
							"pm.test(\"406 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Not Acceptable\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "9210b191-878c-4195-98a8-27c5c42644d6",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "text/plain"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Odyssey\",\r\n  \"type\": \"Yatch\",\r\n  \"length\": 99\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "Post Boat w/ wrong token 401",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "04e2aca2-b228-4d86-9361-eb22f9238feb",
						"exec": [
							"pm.test(\"401 invalid jwt\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"401 invalid jwt message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Missing or invalid JWT\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "a99e8237-f106-44aa-9600-e1e4b3cc16d1",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{wrong_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Odyssey\",\r\n  \"type\": \"Yatch\",\r\n  \"length\": 99\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "Post Boat w/ no token 401",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d9280abf-b210-4801-b6f3-eaf20a32255f",
						"exec": [
							"pm.test(\"401 invalid jwt\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"401 invalid jwt message\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Missing or invalid JWT\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "74836cad-ae26-44e7-a7c6-0e6e2cc74ef5",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Odyssey\",\r\n  \"type\": \"Yatch\",\r\n  \"length\": 99\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "add boat with empty string type 400",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e028a051-8a39-4859-87fb-cfca311378c8",
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object is missing at least one of the required attributes or has a bad attribute\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "d02e5421-c734-4676-979a-d4155b04afeb",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"\",\r\n  \"type\": \"Yfsatch\",\r\n  \"length\": 994\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "add boat with empty string name 400",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e010a9a8-4cc9-4cf3-a94d-cb2515d99a94",
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object is missing at least one of the required attributes or has a bad attribute\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "9cf98865-3d95-4acd-96b2-ecfe5148cdb3",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"test\",\r\n  \"type\": \"\",\r\n  \"length\": 994\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "add boat with missing length 400",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a37bddc1-1b75-4a21-90f8-3daea78b3e52",
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object is missing at least one of the required attributes or has a bad attribute\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "ca92b650-ac11-401c-8f88-2037f348dc51",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"test\",\r\n  \"type\": \"test\"\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "add boat with missing body 400",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fbbf84f5-f3e3-44d4-80af-26963e0f7a0c",
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object is missing at least one of the required attributes or has a bad attribute\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "b76e45dc-1e3a-4ed8-bf03-de9968acbe2f",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "add boat 201",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5e42ed07-2a8c-404f-b2b9-45969571c155",
						"exec": [
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Odyssey\");",
							"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Yatch\");",
							"    pm.expect(pm.response.json()[\"length\"]).to.eq(99);",
							"    pm.expect(pm.response.json()[\"load\"]).to.eq(null);",
							"    pm.expect(pm.response.json()).to.have.property(\"owner\");",
							"",
							"    pm.expect(pm.response.json()).to.have.property(\"id\");",
							"    pm.expect(pm.response.json()).to.have.property(\"self\");",
							"",
							"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							"pm.environment.set(\"boat_id\", pm.response.json()[\"id\"]);",
							"pm.environment.set(\"user_id1\", pm.response.json()[\"owner\"]);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "77b482fd-90fc-489f-ab53-27098437a3e2",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Odyssey\",\r\n  \"type\": \"Yatch\",\r\n  \"length\": 99\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "add boat2 201",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "0d0431a1-2f9c-49ad-9bf2-c4159f811c48",
						"exec": [
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    ",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Odyssey Copy\");",
							"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Yatch\");",
							"    pm.expect(pm.response.json()[\"length\"]).to.eq(99);",
							"    ",
							"    pm.expect(pm.response.json()[\"owner\"]).to.eq( pm.environment.get(\"user_id1\"));",
							"    ",
							"    pm.expect(pm.response.json()).to.have.property(\"id\");",
							"    pm.expect(pm.response.json()).to.have.property(\"self\");",
							"",
							"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							"pm.environment.set(\"boat2_id\", pm.response.json()[\"id\"]);",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "1062e276-4357-4593-8140-2b1efbe0dd8c",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Odyssey Copy\",\r\n  \"type\": \"Yatch\",\r\n  \"length\": 99\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "add boat3 user_id2 201",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4de93302-f48a-46f2-bb11-b2566f4c7e73",
						"exec": [
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Odyssey\");",
							"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Yatch\");",
							"    pm.expect(pm.response.json()[\"length\"]).to.eq(99);",
							"    pm.expect(pm.response.json()).to.have.property(\"owner\");",
							"",
							"    pm.expect(pm.response.json()).to.have.property(\"id\");",
							"    pm.expect(pm.response.json()).to.have.property(\"self\");",
							"",
							"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							"pm.environment.set(\"boat3_id\", pm.response.json()[\"id\"]);",
							"pm.environment.set(\"user_id2\", pm.response.json()[\"owner\"]);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "1adde7ce-7dde-446b-aaae-a4f89ad1dd46",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Odyssey\",\r\n  \"type\": \"Yatch\",\r\n  \"length\": 99\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "add boat4 201",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "63d81fb5-9537-4d56-9f52-21344946c18c",
						"exec": [
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Odyssey Copy\");",
							"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Yatch\");",
							"    pm.expect(pm.response.json()[\"length\"]).to.eq(100);",
							"    pm.expect(pm.response.json()[\"owner\"]).to.eq( pm.environment.get(\"user_id1\"));",
							"    ",
							"    pm.expect(pm.response.json()).to.have.property(\"id\");",
							"    pm.expect(pm.response.json()).to.have.property(\"self\");",
							"",
							"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							"pm.environment.set(\"boat4_id\", pm.response.json()[\"id\"]);",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "8d8b5823-1610-45b0-8057-b861a4c1c079",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Odyssey Copy\",\r\n  \"type\": \"Yatch\",\r\n  \"length\": 100\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "add boat5 201",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "6e59d219-3396-43ff-8184-8a0b4694d5d2",
						"exec": [
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Odyssey Copy\");",
							"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Yatch\");",
							"    pm.expect(pm.response.json()[\"length\"]).to.eq(101);",
							"    pm.expect(pm.response.json()[\"owner\"]).to.eq( pm.environment.get(\"user_id1\"));",
							"    ",
							"    pm.expect(pm.response.json()).to.have.property(\"id\");",
							"    pm.expect(pm.response.json()).to.have.property(\"self\");",
							"",
							"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							"pm.environment.set(\"boat5_id\", pm.response.json()[\"id\"]);",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "ce42dac5-199e-491b-9a52-15ccbc2297bb",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Odyssey Copy\",\r\n  \"type\": \"Yatch\",\r\n  \"length\": 101\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "add boat6 201",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "18cea36d-c452-43d7-916a-d6b24dfd56ce",
						"exec": [
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Odyssey Copy\");",
							"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Yatch\");",
							"    pm.expect(pm.response.json()[\"length\"]).to.eq(102);",
							"    pm.expect(pm.response.json()[\"owner\"]).to.eq( pm.environment.get(\"user_id1\"));",
							"    ",
							"    pm.expect(pm.response.json()).to.have.property(\"id\");",
							"    pm.expect(pm.response.json()).to.have.property(\"self\");",
							"",
							"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							"pm.environment.set(\"boat6_id\", pm.response.json()[\"id\"]);",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "a10ca378-e85c-4759-9027-2a3eec99eba1",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Odyssey Copy\",\r\n  \"type\": \"Yatch\",\r\n  \"length\": 102\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "add boat7 201",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ae6ca8f8-76d2-4200-b178-bd8fed2b8731",
						"exec": [
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Odyssey Copy\");",
							"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Yatch\");",
							"    pm.expect(pm.response.json()[\"length\"]).to.eq(104);",
							"    pm.expect(pm.response.json()[\"owner\"]).to.eq( pm.environment.get(\"user_id1\"));",
							"    ",
							"    pm.expect(pm.response.json()).to.have.property(\"id\");",
							"    pm.expect(pm.response.json()).to.have.property(\"self\");",
							"",
							"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							"pm.environment.set(\"boat7_id\", pm.response.json()[\"id\"]);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "80d7298c-362b-4a2e-876a-2e36f7de1620",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Odyssey Copy\",\r\n  \"type\": \"Yatch\",\r\n  \"length\": 104\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "get boats accept: application/text 406",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "44103047-42cb-4482-9c26-b4d229bf7d83",
						"exec": [
							"pm.test(\"406 status code\", function () {",
							"    pm.response.to.have.status(406);",
							"});",
							"",
							"pm.test(\"406 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Not Acceptable\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "04f7b52a-1605-44cb-a82a-927df548bf84",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "text/plain"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "get boats by owner - no token 401",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "67e472d9-63cb-4400-bd4f-6ddb45e88539",
						"exec": [
							"pm.test(\"401 invalid jwt\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"401 invalid jwt message\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Missing or invalid JWT\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "2fbcdaaf-7dfc-4fb9-adeb-3a5551f74cee",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "get boats by owner - wrong token 401",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b6498956-5ed2-42c5-9a4e-5018320d70b2",
						"exec": [
							"pm.test(\"401 invalid jwt\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"401 invalid jwt message\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Missing or invalid JWT\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "5a4c270f-7ba6-4a88-abc2-32cc3984e538",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{wrong_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "get boats - only returns user_id1 - 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b6d4ae20-0ca5-45e7-b1a6-5427af58b087",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Content is Type JSON\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"boats is 5 in length\", function () {",
							"    pm.expect(pm.response.json().boats.length).to.eq(5);",
							"})",
							"",
							"pm.test(\"boat in boats have properties\", function () {",
							"    var boats = pm.response.json().boats;",
							"    for (var i = 0; i < boats.length; i++) {",
							"        pm.expect(boats[i]).to.have.property(\"name\");",
							"        pm.expect(boats[i]).to.have.property(\"type\");",
							"        pm.expect(boats[i]).to.have.property(\"length\");",
							"        pm.expect(boats[i]).to.have.property(\"owner\");",
							"        pm.expect(boats[i].owner).to.eq( pm.environment.get(\"user_id1\") );",
							"        pm.expect(boats[i]).to.have.property(\"id\");",
							"        pm.expect(boats[i]).to.have.property(\"self\");",
							"",
							"        const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + boats[i][\"id\"];",
							"        pm.expect(boats[i][\"self\"]).to.eq(self_url);",
							"    }",
							"});",
							"",
							"pm.test(\"a next link was provided for pagination\", function () {",
							"    var results = pm.response.json();",
							"    pm.expect(results).to.have.property('next');",
							"    pm.environment.set(\"pagination_link\", pm.response.json()[\"next\"]);",
							"});",
							"",
							"",
							"pm.test(\"total count was provided\", function () {",
							"    var results = pm.response.json();",
							"    pm.expect(results).to.have.property('total');",
							"    pm.expect(results.total).to.be.gte(6);",
							"    pm.environment.set(\"boats_count_user_id1\", pm.response.json().total);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "3278ed22-f15d-4586-9f20-1c1cc33910dc",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "get next boats (pagination) - user_id1 - 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9c30f894-d198-4f57-b124-32cfdb1f062c",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Content is Type JSON\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"boats is at least 1 in length\", function () {",
							"    pm.expect(pm.response.json().boats.length).to.be.gte(1);",
							"})",
							"",
							"pm.test(\"boat in boats have 5 properties\", function () {",
							"    var boats = pm.response.json().boats;",
							"    for (var i = 0; i < boats.length; i++) {",
							"        pm.expect(boats[i]).to.have.property(\"name\");",
							"        pm.expect(boats[i]).to.have.property(\"type\");",
							"        pm.expect(boats[i]).to.have.property(\"length\");",
							"        pm.expect(boats[i]).to.have.property(\"owner\");",
							"        pm.expect(boats[i].owner).to.eq( pm.environment.get(\"user_id1\") );",
							"        pm.expect(boats[i]).to.have.property(\"id\");",
							"        pm.expect(boats[i]).to.have.property(\"self\");",
							"",
							"        const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + boats[i][\"id\"];",
							"        pm.expect(boats[i][\"self\"]).to.eq(self_url);",
							"    }",
							"});",
							"",
							"pm.test(\"total count was provided\", function () {",
							"    var results = pm.response.json();",
							"    pm.expect(results).to.have.property('total');",
							"    pm.expect(results.total).to.be.gte(6);",
							"    pm.expect(results.total).to.be.eq(pm.environment.get(\"boats_count_user_id1\"));",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "9ea2d436-1ea5-4585-8d0f-f1b5334cef62",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{pagination_link}}",
					"host": [
						"{{pagination_link}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get boats -only returns user_id2 -200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9b50d973-490b-43a6-a642-a17e24b47393",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Content is Type JSON\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"boats is more than 1 in length\", function () {",
							"    pm.expect(pm.response.json().boats.length).to.be.gte(1);",
							"})",
							"",
							"pm.test(\"boat in boats have 5 properties\", function () {",
							"    var boats = pm.response.json();",
							"    for (var i = 0; i < boats.length; i++) {",
							"        pm.expect(boats[i]).to.have.property(\"name\");",
							"        pm.expect(boats[i]).to.have.property(\"type\");",
							"        pm.expect(boats[i]).to.have.property(\"length\");",
							"        pm.expect(boats[i]).to.have.property(\"owner\");",
							"        pm.expect(boats[i].owner).to.eq( pm.environment.get(\"user_id2\") );",
							"        pm.expect(boats[i]).to.have.property(\"id\");",
							"        pm.expect(boats[i]).to.have.property(\"self\");",
							"",
							"        const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + boats[i][\"id\"];",
							"        pm.expect(boats[i][\"self\"]).to.eq(self_url);",
							"    }",
							"});",
							"",
							"pm.test(\"total count was provided\", function () {",
							"    var results = pm.response.json();",
							"    pm.expect(results).to.have.property('total');",
							"    pm.expect(results.total).to.be.gte(1);",
							"    pm.environment.set(\"boats_count_user_id2\", pm.response.json().total);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "c1c22ac0-c6b7-42f9-81b9-5b82226fa7bc",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "get boat1 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3b2dea96-bf95-491a-9640-5ef395348b33",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Odyssey\");",
							"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Yatch\");",
							"    pm.expect(pm.response.json()[\"length\"]).to.eq(99);",
							"    pm.expect(pm.response.json()[\"load\"]).to.eq(null);",
							"",
							"    pm.expect(pm.response.json()).to.have.property(\"owner\");",
							"    pm.expect(pm.response.json().owner).to.eq( pm.environment.get(\"user_id1\") );",
							"",
							"    pm.expect(pm.response.json()).to.have.property(\"id\");",
							"    pm.expect(pm.response.json()).to.have.property(\"self\");",
							"",
							"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "daf5b8c1-2f62-4493-90cb-1c5299e1d09c",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true,
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get boats accept: application/text 406",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "889dabb9-fa9d-4ab7-b528-bd965fdc59e0",
						"exec": [
							"pm.test(\"406 status code\", function () {",
							"    pm.response.to.have.status(406);",
							"});",
							"",
							"pm.test(\"406 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Not Acceptable\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "b33055cb-7ee6-43db-91dd-0a7eac092545",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "text/plain"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get boat-invalid id-404",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1dea468f-56ed-4198-a7e9-d7ff5fdcd30b",
						"exec": [
							"pm.test(\"404 invalid jwt\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"404 invalid jwt message\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No boat with this boat_id exists\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "40e31183-d8d6-46f5-91bf-7fd4fd0dece1",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/boats/{{invalid_boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{invalid_boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get boat1 (user_id2) 403",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "bce5cc93-ffa2-4e8e-a4b8-dd9c6f547e2c",
						"exec": [
							"pm.test(\"403 invalid jwt\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"pm.test(\"403 authority\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Boat/Load owned by someone else\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "800dc794-09ea-4d3f-a9b3-60c26fda05e7",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get boat1 - no token 401",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2d628967-873a-4373-848f-8edf5154c939",
						"exec": [
							"pm.test(\"401 invalid jwt\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"401 invalid jwt message\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Missing or invalid JWT\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "4b3acdcd-e7c8-46e6-8c62-d9ce3e123b5b",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get boat1 - wrong token 401",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "cbfc83f9-68c3-4245-902a-d396dafb5977",
						"exec": [
							"pm.test(\"401 invalid jwt\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"401 invalid jwt message\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Missing or invalid JWT\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "c9f7f74a-8122-43ad-bb78-2572e7e41fdb",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{wrong_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get boat3 user_id2 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a666bea5-51c1-4d94-901b-1174eb689f4c",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Odyssey\");",
							"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Yatch\");",
							"    pm.expect(pm.response.json()[\"length\"]).to.eq(99);",
							"    pm.expect(pm.response.json()[\"load\"]).to.eq(null);",
							"",
							"    pm.expect(pm.response.json()).to.have.property(\"owner\");",
							"    pm.expect(pm.response.json().owner).to.eq( pm.environment.get(\"user_id2\") );",
							"",
							"    pm.expect(pm.response.json()).to.have.property(\"id\");",
							"    pm.expect(pm.response.json()).to.have.property(\"self\");",
							"",
							"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "07a32c37-4030-4ea9-84f5-2efdc67fb777",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat3_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat3_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "add load accept: application/text 406",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8b305371-4d3e-4b6b-88e5-90e84e335403",
						"exec": [
							"pm.test(\"406 status code\", function () {",
							"    pm.response.to.have.status(406);",
							"});",
							"",
							"pm.test(\"406 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Not Acceptable\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "d167db2e-b47d-4a8f-8cc3-52f4bd277490",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "text/plain"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Odyssey\",\r\n  \"type\": \"Yatch\",\r\n  \"length\": 99\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads"
					]
				}
			},
			"response": []
		},
		{
			"name": "Send XML (masked as json) to add load 415",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "37d0b0ee-1bcc-4e9e-8f2c-a76df90fd117",
						"exec": [
							"pm.test(\"415 status code\", function () {",
							"    pm.response.to.have.status(415);",
							"});",
							"",
							"pm.test(\"415 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Only Accept application/json\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "a56b0b7f-9155-4682-838a-fd28de86f9c3",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\r\n<root>\r\n  <content>Odyssey</content>\r\n  <weight>99</weight>\r\n</root>",
					"options": {
						"raw": {
							"language": "xml"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads"
					]
				}
			},
			"response": []
		},
		{
			"name": "add load1 201",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "cf405080-f527-49f7-af53-553aa6d3dd98",
						"exec": [
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"content\"]).to.eq(\"Toys\");",
							"    pm.expect(pm.response.json()[\"weight\"]).to.eq(100);",
							"    pm.expect(pm.response.json()[\"carrier\"]).to.eq(null);",
							"    pm.expect(pm.response.json()).to.have.property(\"createdAt\");",
							"    pm.expect(pm.response.json()).to.have.property(\"updatedAt\");",
							"",
							"    pm.expect(pm.response.json().createdAt).to.eq(pm.response.json().updatedAt);",
							"",
							"    pm.expect(pm.response.json()).to.have.property(\"id\");",
							"",
							"    pm.expect(pm.response.json()).to.have.property(\"owner\");",
							"    pm.expect(pm.response.json()[\"owner\"]).to.eq( pm.environment.get(\"user_id1\"));",
							"",
							"    pm.expect(pm.response.json()).to.have.property(\"self\");",
							"",
							"    const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							"pm.environment.set(\"load1_id\", pm.response.json()[\"id\"]);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "13f167d4-d70d-4b90-9013-dde42f416707",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"weight\": 100,\r\n\t\"content\": \"Toys\"\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads"
					]
				}
			},
			"response": []
		},
		{
			"name": "add load2 201",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2dca7f2b-8f9f-4a10-b7b0-975039bf60d2",
						"exec": [
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"content\"]).to.eq(\"Toys\");",
							"    pm.expect(pm.response.json()[\"weight\"]).to.eq(101);",
							"    pm.expect(pm.response.json()[\"carrier\"]).to.eq(null);",
							"    pm.expect(pm.response.json()).to.have.property(\"createdAt\");",
							"    pm.expect(pm.response.json()).to.have.property(\"updatedAt\");",
							"",
							"    pm.expect(pm.response.json().createdAt).to.eq(pm.response.json().updatedAt);",
							"",
							"    pm.expect(pm.response.json()).to.have.property(\"id\");",
							"    pm.expect(pm.response.json()).to.have.property(\"owner\");",
							"    pm.expect(pm.response.json()[\"owner\"]).to.eq( pm.environment.get(\"user_id1\"));",
							"",
							"    pm.expect(pm.response.json()).to.have.property(\"self\");",
							"",
							"    const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							"pm.environment.set(\"load2_id\", pm.response.json()[\"id\"]);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "f9ecc9f8-1312-4945-a8d3-530f35f84c43",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"weight\": 101,\r\n\t\"content\": \"Toys\"\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads"
					]
				}
			},
			"response": []
		},
		{
			"name": "add load3 201 - user_id2",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "571acb61-e763-4a2d-b1af-0f8c2fdda79d",
						"exec": [
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"content\"]).to.eq(\"Dolls\");",
							"    pm.expect(pm.response.json()[\"weight\"]).to.eq(102);",
							"    pm.expect(pm.response.json()[\"carrier\"]).to.eq(null);",
							"    pm.expect(pm.response.json()).to.have.property(\"createdAt\");",
							"    pm.expect(pm.response.json()).to.have.property(\"updatedAt\");",
							"",
							"    pm.expect(pm.response.json().createdAt).to.eq(pm.response.json().updatedAt);",
							"",
							"    pm.expect(pm.response.json()).to.have.property(\"id\");",
							"    pm.expect(pm.response.json()).to.have.property(\"owner\");",
							"    pm.expect(pm.response.json()[\"owner\"]).to.eq( pm.environment.get(\"user_id2\"));",
							"",
							"    pm.expect(pm.response.json()).to.have.property(\"self\");",
							"",
							"    const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							"pm.environment.set(\"load3_id\", pm.response.json()[\"id\"]);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "8fb21827-2242-4d2e-9186-97b402e18917",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"weight\": 102,\r\n\t\"content\": \"Dolls\"\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads"
					]
				}
			},
			"response": []
		},
		{
			"name": "add load4 201",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f0242647-206c-4bd0-8572-cbbac362b3e4",
						"exec": [
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"content\"]).to.eq(\"Toys\");",
							"    pm.expect(pm.response.json()[\"weight\"]).to.eq(201);",
							"    pm.expect(pm.response.json()[\"carrier\"]).to.eq(null);",
							"    pm.expect(pm.response.json()).to.have.property(\"createdAt\");",
							"    pm.expect(pm.response.json()).to.have.property(\"updatedAt\");",
							"",
							"    pm.expect(pm.response.json().createdAt).to.eq(pm.response.json().updatedAt);",
							"",
							"    pm.expect(pm.response.json()).to.have.property(\"id\");",
							"    pm.expect(pm.response.json()).to.have.property(\"owner\");",
							"    pm.expect(pm.response.json()[\"owner\"]).to.eq( pm.environment.get(\"user_id1\"));",
							"",
							"    pm.expect(pm.response.json()).to.have.property(\"self\");",
							"",
							"    const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							"pm.environment.set(\"load4_id\", pm.response.json()[\"id\"]);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "88b04b6b-7e10-4817-888d-63b4563b3664",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"weight\": 201,\r\n\t\"content\": \"Toys\"\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads"
					]
				}
			},
			"response": []
		},
		{
			"name": "add load5 201",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "caa6c5fe-4175-4307-b3dd-44bb0d95934d",
						"exec": [
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"content\"]).to.eq(\"Toys\");",
							"    pm.expect(pm.response.json()[\"weight\"]).to.eq(105);",
							"    pm.expect(pm.response.json()[\"carrier\"]).to.eq(null);",
							"    pm.expect(pm.response.json()).to.have.property(\"createdAt\");",
							"    pm.expect(pm.response.json()).to.have.property(\"updatedAt\");",
							"",
							"    pm.expect(pm.response.json().createdAt).to.eq(pm.response.json().updatedAt);",
							"",
							"    pm.expect(pm.response.json()).to.have.property(\"id\");",
							"    pm.expect(pm.response.json()).to.have.property(\"owner\");",
							"    pm.expect(pm.response.json()[\"owner\"]).to.eq( pm.environment.get(\"user_id1\"));",
							"",
							"    pm.expect(pm.response.json()).to.have.property(\"self\");",
							"",
							"    const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							"pm.environment.set(\"load5_id\", pm.response.json()[\"id\"]);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "e7a7de14-12a8-463d-acab-9aa1ebf10822",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"weight\": 105,\r\n\t\"content\": \"Toys\"\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads"
					]
				}
			},
			"response": []
		},
		{
			"name": "add load6 201",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "547e3b6a-b92c-4a30-a3e1-a0401a7e3033",
						"exec": [
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"content\"]).to.eq(\"Toys\");",
							"    pm.expect(pm.response.json()[\"weight\"]).to.eq(107);",
							"    pm.expect(pm.response.json()[\"carrier\"]).to.eq(null);",
							"    pm.expect(pm.response.json()).to.have.property(\"createdAt\");",
							"    pm.expect(pm.response.json()).to.have.property(\"updatedAt\");",
							"",
							"    pm.expect(pm.response.json().createdAt).to.eq(pm.response.json().updatedAt);",
							"",
							"    pm.expect(pm.response.json()).to.have.property(\"id\");",
							"    pm.expect(pm.response.json()).to.have.property(\"owner\");",
							"    pm.expect(pm.response.json()[\"owner\"]).to.eq( pm.environment.get(\"user_id1\"));",
							"",
							"    pm.expect(pm.response.json()).to.have.property(\"self\");",
							"",
							"    const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							"pm.environment.set(\"load6_id\", pm.response.json()[\"id\"]);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "ed262759-41e9-452d-8a10-8f18b4f89604",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"weight\": 107,\r\n\t\"content\": \"Toys\"\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads"
					]
				}
			},
			"response": []
		},
		{
			"name": "add load7 201",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d7ff66f7-6602-4e44-a230-367c4038481e",
						"exec": [
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"content\"]).to.eq(\"Piano\");",
							"    pm.expect(pm.response.json()[\"weight\"]).to.eq(110);",
							"    pm.expect(pm.response.json()[\"carrier\"]).to.eq(null);",
							"    pm.expect(pm.response.json()).to.have.property(\"createdAt\");",
							"    pm.expect(pm.response.json()).to.have.property(\"updatedAt\");",
							"",
							"    pm.expect(pm.response.json().createdAt).to.eq(pm.response.json().updatedAt);",
							"",
							"    pm.expect(pm.response.json()).to.have.property(\"id\");",
							"    pm.expect(pm.response.json()).to.have.property(\"owner\");",
							"    pm.expect(pm.response.json()[\"owner\"]).to.eq( pm.environment.get(\"user_id1\"));",
							"",
							"    pm.expect(pm.response.json()).to.have.property(\"self\");",
							"",
							"    const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							"pm.environment.set(\"load7_id\", pm.response.json()[\"id\"]);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "c21ad56d-d34b-4050-a538-c153557d25a6",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"weight\": 110,\r\n\t\"content\": \"Piano\"\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads"
					]
				}
			},
			"response": []
		},
		{
			"name": "get loads accept: application/text 406",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "22f31b45-476e-41f2-a9ce-cc23c2e97c6e",
						"exec": [
							"pm.test(\"406 status code\", function () {",
							"    pm.response.to.have.status(406);",
							"});",
							"",
							"pm.test(\"406 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Not Acceptable\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "e868c285-cc41-455e-8061-15d0556750e1",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "text/plain"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads"
					]
				}
			},
			"response": []
		},
		{
			"name": "get loads by owner - no token 401",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c67c8455-28a0-40aa-8509-41e867937d9e",
						"exec": [
							"pm.test(\"401 invalid jwt\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"401 invalid jwt message\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Missing or invalid JWT\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "ed590aee-2b1d-4714-ae55-49478ae47592",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads"
					]
				}
			},
			"response": []
		},
		{
			"name": "get loads by owner - wrong token 401",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "44192c33-a128-4acd-a5f7-7bbd1a1989f6",
						"exec": [
							"pm.test(\"401 invalid jwt\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"401 invalid jwt message\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Missing or invalid JWT\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "0a54caec-ee52-475d-bea3-19cfe9ae2661",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{wrong_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads"
					]
				}
			},
			"response": []
		},
		{
			"name": "get loads- only returns user_id1 - 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a68f9d52-d30e-46a1-8e0d-9d288c4ced80",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Content is Type JSON\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"loads is 5 in length\", function () {",
							"    pm.expect(pm.response.json().loads.length).to.be.gte(5);",
							"})",
							"",
							"pm.test(\"load in loads have properties\", function () {",
							"    var loads = pm.response.json().loads;",
							"    for (var i = 0; i < loads.length; i++) {",
							"        pm.expect(loads[i]).to.have.property(\"content\");",
							"        pm.expect(loads[i]).to.have.property(\"weight\");",
							"",
							"        pm.expect(loads[i]).to.have.property(\"createdAt\");",
							"        pm.expect(loads[i]).to.have.property(\"updatedAt\");",
							"",
							"        pm.expect(loads[i]).to.have.property(\"owner\");",
							"        pm.expect(loads[i].owner).to.eq( pm.environment.get(\"user_id1\") );",
							"        pm.expect(loads[i]).to.have.property(\"id\");",
							"        pm.expect(loads[i]).to.have.property(\"self\");",
							"",
							"        const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + loads[i][\"id\"];",
							"        pm.expect(loads[i][\"self\"]).to.eq(self_url);",
							"    }",
							"});",
							"",
							"pm.test(\"a next link was provided for pagination\", function () {",
							"    var results = pm.response.json();",
							"    pm.expect(results).to.have.property('next');",
							"    pm.environment.set(\"pagination_loads_link\", pm.response.json()[\"next\"]);",
							"});",
							"",
							"pm.test(\"total count was provided\", function () {",
							"    var results = pm.response.json();",
							"    pm.expect(results).to.have.property('total');",
							"    pm.expect(results.total).to.be.gte(6);",
							"    pm.environment.set(\"loads_count_user_id1\", pm.response.json().total);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "17bff6b2-b539-4d52-9991-ddbef797a6ed",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads"
					]
				}
			},
			"response": []
		},
		{
			"name": "get next loads(pagination) - user_id1 - 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "51c8ca07-4e9f-49ef-a70d-41d4b4c9be93",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Content is Type JSON\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"loads is at least 1 in length\", function () {",
							"    pm.expect(pm.response.json().loads.length).to.be.gte(1);",
							"})",
							"",
							"pm.test(\"boat in boats have 5 properties\", function () {",
							"    var loads = pm.response.json().loads;",
							"    for (var i = 0; i < loads.length; i++) {",
							"        pm.expect(loads[i]).to.have.property(\"content\");",
							"        pm.expect(loads[i]).to.have.property(\"weight\");",
							"",
							"        pm.expect(loads[i]).to.have.property(\"createdAt\");",
							"        pm.expect(loads[i]).to.have.property(\"updatedAt\");",
							"",
							"        pm.expect(loads[i]).to.have.property(\"owner\");",
							"        pm.expect(loads[i].owner).to.eq( pm.environment.get(\"user_id1\") );",
							"        pm.expect(loads[i]).to.have.property(\"id\");",
							"        pm.expect(loads[i]).to.have.property(\"self\");",
							"",
							"        const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + loads[i][\"id\"];",
							"        pm.expect(loads[i][\"self\"]).to.eq(self_url);",
							"    }",
							"});",
							"",
							"pm.test(\"total count was provided\", function () {",
							"    var results = pm.response.json();",
							"    pm.expect(results).to.have.property('total');",
							"    pm.expect(results.total).to.be.gte(6);",
							"    pm.expect(results.total).to.be.eq(pm.environment.get(\"loads_count_user_id1\"));",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "9ba58f02-df27-4dd1-8a08-3334c4619fc5",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{pagination_loads_link}}",
					"host": [
						"{{pagination_loads_link}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get loads- only returns user_id2 - 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5978a211-29b1-45ac-8173-f4d4f5d79b14",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Content is Type JSON\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"loads is 5 in length\", function () {",
							"    pm.expect(pm.response.json().loads.length).to.be.gte(1);",
							"})",
							"",
							"pm.test(\"load in loads have properties\", function () {",
							"    var loads = pm.response.json().loads;",
							"    for (var i = 0; i < loads.length; i++) {",
							"        pm.expect(loads[i]).to.have.property(\"content\");",
							"        pm.expect(loads[i]).to.have.property(\"weight\");",
							"",
							"        pm.expect(loads[i]).to.have.property(\"createdAt\");",
							"        pm.expect(loads[i]).to.have.property(\"updatedAt\");",
							"",
							"        pm.expect(loads[i]).to.have.property(\"owner\");",
							"        pm.expect(loads[i].owner).to.eq( pm.environment.get(\"user_id2\") );",
							"        pm.expect(loads[i]).to.have.property(\"id\");",
							"        pm.expect(loads[i]).to.have.property(\"self\");",
							"",
							"        const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + loads[i][\"id\"];",
							"        pm.expect(loads[i][\"self\"]).to.eq(self_url);",
							"    }",
							"});",
							"",
							"",
							"pm.test(\"total count was provided\", function () {",
							"    var results = pm.response.json();",
							"    pm.expect(results).to.have.property('total');",
							"    pm.expect(results.total).to.be.gte(1);",
							"    pm.environment.set(\"loads_count_user_id2\", results.total);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "10f60c19-d34d-4ba0-a600-480e1cdee674",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads"
					]
				}
			},
			"response": []
		},
		{
			"name": "get load1 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "537fa718-2603-4f70-843e-30c4183e6aef",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"content\"]).to.eq(\"Toys\");",
							"    pm.expect(pm.response.json()[\"weight\"]).to.eq(100);",
							"    pm.expect(pm.response.json()[\"carrier\"]).to.eq(null);",
							"    pm.expect(pm.response.json()).to.have.property(\"createdAt\");",
							"    pm.expect(pm.response.json()).to.have.property(\"updatedAt\");",
							"",
							"    pm.expect(pm.response.json().createdAt).to.eq(pm.response.json().updatedAt);",
							"",
							"    pm.expect(pm.response.json()).to.have.property(\"id\");",
							"",
							"    pm.expect(pm.response.json()).to.have.property(\"owner\");",
							"    pm.expect(pm.response.json()[\"owner\"]).to.eq( pm.environment.get(\"user_id1\"));",
							"",
							"    pm.expect(pm.response.json()).to.have.property(\"self\");",
							"",
							"    const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "f2e0a016-c051-4f40-9722-4352213d0814",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true,
				"followOriginalHttpMethod": false,
				"followAuthorizationHeader": false,
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/loads/{{load1_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load1_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get load1 accept: application/text 406",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8067364f-2f30-4c3f-af9b-c5aecdfa6531",
						"exec": [
							"pm.test(\"406 status code\", function () {",
							"    pm.response.to.have.status(406);",
							"});",
							"",
							"pm.test(\"406 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Not Acceptable\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "44a44b94-3af7-497c-b0d0-9cb92a75db88",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "text/plain"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/loads/{{load1_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load1_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get load1- no token 401",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a5b53325-da03-4c10-80dd-ee417d6366a2",
						"exec": [
							"pm.test(\"401 invalid jwt\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"401 invalid jwt message\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Missing or invalid JWT\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "cc46ded2-86c4-4429-b94d-902c65a6ca30",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads/{{load1_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load1_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get load1-invalid load id-404",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ed97e32e-47c9-4136-8527-02a7e5ee3cff",
						"exec": [
							"pm.test(\"404 status\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"404 invalid jwt message\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No load with this load_id exists\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "8ac4f08e-4adc-4bb3-b4cc-4f10e50afcf4",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads/{{invalid_load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{invalid_load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get load1-user_id2-403",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d95de272-a142-4381-bb01-fc43fc2e7ba2",
						"exec": [
							"pm.test(\"403 invalid jwt\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"pm.test(\"401 invalid jwt message\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Boat/Load owned by someone else\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "50bc5044-733e-4a8d-b700-844207d59f8b",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads/{{load1_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load1_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get load3 200 - user_id2",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1241b756-dd68-447b-a494-cd0c76edc551",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"content\"]).to.eq(\"Dolls\");",
							"    pm.expect(pm.response.json()[\"weight\"]).to.eq(102);",
							"    pm.expect(pm.response.json()[\"carrier\"]).to.eq(null);",
							"    pm.expect(pm.response.json()).to.have.property(\"createdAt\");",
							"    pm.expect(pm.response.json()).to.have.property(\"updatedAt\");",
							"",
							"    pm.expect(pm.response.json().createdAt).to.eq(pm.response.json().updatedAt);",
							"",
							"    pm.expect(pm.response.json()).to.have.property(\"id\");",
							"    pm.expect(pm.response.json()).to.have.property(\"owner\");",
							"    pm.expect(pm.response.json()[\"owner\"]).to.eq( pm.environment.get(\"user_id2\"));",
							"",
							"    pm.expect(pm.response.json()).to.have.property(\"self\");",
							"",
							"    const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "c1361d9a-5cc4-46eb-9bd0-6c48837baa04",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/loads/{{load3_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load3_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add load1 to boat1 - 401 - no JWT",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "446e8da4-aac0-4b9d-9f6c-1872b51fad2f",
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"404 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Missing or invalid JWT\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "1f1b6797-9f9f-4c30-85e5-09bcf3c91243",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"weight\": 100,\r\n\t\"content\": \"Toys\"\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}/load/{{load1_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}",
						"load",
						"{{load1_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add load1 to boat1 - 401 - invalid JWT",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d5827bc6-6ff7-4bcf-b8b6-e36fd5b34add",
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"404 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Missing or invalid JWT\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "eb33aa38-ffbb-4199-85ea-357077411333",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{wrong_token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"weight\": 100,\r\n\t\"content\": \"Toys\"\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}/load/{{load1_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}",
						"load",
						"{{load1_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add load1 to boat1 - 404 - invalid boat",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "48eb0548-c560-433a-92b1-51cc6cdf1090",
						"exec": [
							"pm.test(\"404 status code\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"404 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The specified boat and/or load don’t exist\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "c3aa011a-9d93-4be7-945c-e14c2d652015",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"weight\": 100,\r\n\t\"content\": \"Toys\"\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats/{{invalid_boat_id}}/load/{{load1_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{invalid_boat_id}}",
						"load",
						"{{load1_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add load1 to boat1 - 404 - invalid load",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9eb02650-a1ca-4029-bb35-17c570406e0b",
						"exec": [
							"pm.test(\"404 status code\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"404 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The specified boat and/or load don’t exist\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "e1325b1c-e88e-4b52-855a-e33d17dfcb2d",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"weight\": 100,\r\n\t\"content\": \"Toys\"\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}/load/{{invalid_load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}",
						"load",
						"{{invalid_load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add load1 to boat1 - 204",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e94fcaae-480c-42cf-ab4d-9d802b8ee4ea",
						"exec": [
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "a0ed3dc1-2968-4a6d-80d8-bf210d0ab911",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"weight\": 100,\r\n\t\"content\": \"Toys\"\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}/load/{{load1_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}",
						"load",
						"{{load1_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add load1 to boat1 - 409 (both full)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4543fe58-115e-41e2-a7c4-389025edd777",
						"exec": [
							"pm.test(\"409 status code\", function () {",
							"    pm.response.to.have.status(409);",
							"});",
							"",
							"pm.test(\"409 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The boat already has a load\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "3008f899-004d-4602-8ba7-8e429ee36665",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"weight\": 100,\r\n\t\"content\": \"Toys\"\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}/load/{{load1_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}",
						"load",
						"{{load1_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add load2 to boat1 - 409 (boat1 full)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "23448d40-95b2-4223-8189-b0798baeb657",
						"exec": [
							"pm.test(\"409 status code\", function () {",
							"    pm.response.to.have.status(409);",
							"});",
							"",
							"pm.test(\"409 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The boat already has a load\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "5d34d1c3-d61a-4720-997e-42212b1b2e6e",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"weight\": 100,\r\n\t\"content\": \"Toys\"\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}/load/{{load2_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}",
						"load",
						"{{load2_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add load1 to boat2 - 409 (load1 full)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7b2476d7-b332-4aa1-8299-8e24d4be03f2",
						"exec": [
							"pm.test(\"409 status code\", function () {",
							"    pm.response.to.have.status(409);",
							"});",
							"",
							"pm.test(\"409 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The load is already carried by a boat\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "2b800eba-185b-4e06-b8d7-41df8a27807a",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"weight\": 100,\r\n\t\"content\": \"Toys\"\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat2_id}}/load/{{load1_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat2_id}}",
						"load",
						"{{load1_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add load2 to boat3 (user_id2) - 403",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5fe28849-ed0f-4a5a-92e4-e09578465c75",
						"exec": [
							"pm.test(\"403 status code\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"pm.test(\"403 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Boat/Load owned by someone else\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "89f98445-725b-4bf0-8278-c9c3bec8713d",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"weight\": 100,\r\n\t\"content\": \"Toys\"\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat3_id}}/load/{{load2_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat3_id}}",
						"load",
						"{{load2_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add load2 to boat2 -wrong token(user_id2) - 403",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fdc12dc4-c8c5-4131-b0cb-40634208a3ac",
						"exec": [
							"pm.test(\"403 status code\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"",
							"pm.test(\"400 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Boat/Load owned by someone else\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "2f692852-c6e4-47f5-97b0-48f2dea1f976",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\") + 50);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"weight\": 100,\r\n\t\"content\": \"Toys\"\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat2_id}}/load/{{load2_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat2_id}}",
						"load",
						"{{load2_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add load2(user_id1) to boat3(user_id2) - 403",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "48ad2f40-4a3c-4ac1-96e6-7346775f5652",
						"exec": [
							"pm.test(\"403 status code\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"",
							"pm.test(\"400 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Boat/Load owned by someone else\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "29555d3d-edfc-48b9-834d-486d5dc3515a",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"weight\": 100,\r\n\t\"content\": \"Toys\"\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat3_id}}/load/{{load2_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat3_id}}",
						"load",
						"{{load2_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add load2 to boat2 - 204",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5eb94ace-8e57-48ba-9eee-efd2420953b3",
						"exec": [
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "b9ae9737-ec95-40ae-987c-9620a8ad3601",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"weight\": 100,\r\n\t\"content\": \"Toys\"\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat2_id}}/load/{{load2_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat2_id}}",
						"load",
						"{{load2_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add load3 to boat3 - 204",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f493ba67-e383-4f8c-bcd7-7336431a6c86",
						"exec": [
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "021fc79b-d627-41fc-9a92-69f86a810b68",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"weight\": 100,\r\n\t\"content\": \"Toys\"\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat3_id}}/load/{{load3_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat3_id}}",
						"load",
						"{{load3_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update boat accept: application/text 406",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "555fed65-daa7-407c-99fe-2e43116fd242",
						"exec": [
							"pm.test(\"406 status code\", function () {",
							"    pm.response.to.have.status(406);",
							"});",
							"",
							"pm.test(\"406 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Not Acceptable\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "2ede0369-8d8b-4c4d-a6fe-11c922b83840",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "text/plain"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Odyssey\",\r\n  \"type\": \"Yatch\",\r\n  \"length\": 99\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Send XML (masked as json) to update boat 415",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7455aff5-3ceb-4a5e-bdd2-038bf9ae973f",
						"exec": [
							"pm.test(\"415 status code\", function () {",
							"    pm.response.to.have.status(415);",
							"});",
							"",
							"pm.test(\"415 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Only Accept application/json\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "14cfcb45-5600-46fc-bf6d-2c6e6f2cddeb",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\r\n<root>\r\n  <name>Odyssey</name>\r\n  <weight>99</weight>\r\n</root>",
					"options": {
						"raw": {
							"language": "xml"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update boat1 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8fb65126-427d-4f54-8d2d-1dc06fbc8592",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Odyssey1\");",
							"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Yatch1\");",
							"    pm.expect(pm.response.json()[\"length\"]).to.eq(10);",
							"    pm.expect(pm.response.json()[\"load\"]).to.eq( pm.environment.get(\"load1_id\"));",
							"",
							"    pm.expect(pm.response.json()).to.have.property(\"owner\");",
							"    pm.expect(pm.response.json().owner).to.eq( pm.environment.get(\"user_id1\") );",
							"",
							"    pm.expect(pm.response.json()).to.have.property(\"id\");",
							"    pm.expect(pm.response.json()).to.have.property(\"self\");",
							"",
							"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "6107adda-64f4-4794-9fe9-1f206fa1ae86",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Odyssey1\",\r\n  \"type\": \"Yatch1\",\r\n  \"length\": 10\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update boat1 -missing length-400",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ad4985d0-7405-4abd-891d-b375ae690db4",
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object is missing at least one of the required attributes\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "de82780d-2398-4e08-8706-9c7991704883",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Odys33sey1\",\r\n  \"type\": \"Y33atch1\"\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update boat1 -missing type-400",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "90b282fb-aca7-4088-88bd-57e20dfb1488",
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object is missing at least one of the required attributes\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "4d4962ad-df39-402c-a6c0-e691672f6cb8",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Odys33sey1\",\r\n  \"weight\": 1000000\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update boat1 -missing name-400",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d6dfd375-542e-4486-b69a-9660833c4edb",
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object is missing at least one of the required attributes\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "0cdc2a22-6bd3-4d04-805d-b0ced2167f03",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"weight\": 1000000,\r\n  \"type\": \"Y33atch1\"\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update boat-invalid boat-404",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fda1afe1-4a55-4d55-9d21-a84969e5a531",
						"exec": [
							"pm.test(\"404 status code\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"404 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No boat with this boat_id exists\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "e47f2f8a-12eb-4c1f-82b8-788a192192cb",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"length\": 1000000,\r\n  \"type\": \"Y33atch1\",\r\n  \"name\": \"super_boat\"\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats/{{invalid_boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{invalid_boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update boat1 (user_id2) 403",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8732095e-eb3c-4459-83b9-cfd0ec23003f",
						"exec": [
							"pm.test(\"403 status code\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Boat owned by someone else\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "abd6e761-29f4-4fde-a29b-695a5ae8d3ec",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Odyssey11\",\r\n  \"type\": \"Yatch11\",\r\n  \"length\": 1110\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update boat1 wrong token 401",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a88e76ca-db54-4a4a-9e92-7812665502d5",
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Missing or invalid JWT\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "294a8693-0cd4-464a-be4c-e9dcf51fc679",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\") + 100 );\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{wrong_token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Odyssey11\",\r\n  \"type\": \"Yatch11\",\r\n  \"length\": 1110\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update boat1 no token 401",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9e90f4a8-860a-461f-9a58-9c61f9fa83a0",
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Missing or invalid JWT\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "0dc2be43-949a-4930-a531-ed95065945dd",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Odyssey11\",\r\n  \"type\": \"Yatch11\",\r\n  \"length\": 1110\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update boat3 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "385025ed-2347-4577-9dd1-a1f2ff6d6122",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Odyssey2\");",
							"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Yatch2\");",
							"    pm.expect(pm.response.json()[\"length\"]).to.eq(12);",
							"    pm.expect(pm.response.json()[\"load\"]).to.eq( pm.environment.get(\"load3_id\"));",
							"",
							"    pm.expect(pm.response.json()).to.have.property(\"owner\");",
							"    pm.expect(pm.response.json().owner).to.eq( pm.environment.get(\"user_id2\") );",
							"",
							"    pm.expect(pm.response.json()).to.have.property(\"id\");",
							"    pm.expect(pm.response.json()).to.have.property(\"self\");",
							"",
							"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "4d63f709-b184-4275-afa8-f076dd67d4b8",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Odyssey2\",\r\n  \"type\": \"Yatch2\",\r\n  \"length\": 12\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat3_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat3_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update load accept: application/text 406",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7d8818b1-8658-47f9-ac37-b730843fadff",
						"exec": [
							"pm.test(\"406 status code\", function () {",
							"    pm.response.to.have.status(406);",
							"});",
							"",
							"pm.test(\"406 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Not Acceptable\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "58bdfcf3-7e7c-4a4a-b3ed-a5a2b1357e1b",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "text/plain"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Odyssey\",\r\n  \"type\": \"Yatch\",\r\n  \"length\": 99\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/loads/{{load1_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load1_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Send XML (masked as json) to update load 415",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "41c2b9c1-7cf0-43b5-b9d5-f27624063e9f",
						"exec": [
							"pm.test(\"415 status code\", function () {",
							"    pm.response.to.have.status(415);",
							"});",
							"",
							"pm.test(\"415 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Only Accept application/json\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "3d75deab-89b1-4156-9d29-88f44c63666a",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\r\n<root>\r\n  <content>Odyssey</content>\r\n  <weight>99</weight>\r\n</root>",
					"options": {
						"raw": {
							"language": "xml"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/loads/{{load1_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load1_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update load1 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "cae18ab9-5a8a-4183-acb1-f54e28ab7e5d",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"updatedAt has changed\", function () {",
							"    pm.expect(pm.response.json().createdAt).to.not.eq(pm.response.json().updatedAt);",
							"})",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"content\"]).to.eq(\"Toys1\");",
							"    pm.expect(pm.response.json()[\"weight\"]).to.eq(1000);",
							"    pm.expect(pm.response.json()[\"carrier\"]).to.eq( pm.environment.get(\"boat_id\") );",
							"    pm.expect(pm.response.json()).to.have.property(\"createdAt\");",
							"    pm.expect(pm.response.json()).to.have.property(\"updatedAt\");",
							"    5714080711049216",
							"",
							"    pm.expect(pm.response.json().createdAt).to.not.eq(pm.response.json().updatedAt);",
							"",
							"    pm.expect(pm.response.json()).to.have.property(\"id\");",
							"",
							"    pm.expect(pm.response.json()).to.have.property(\"owner\");",
							"    pm.expect(pm.response.json()[\"owner\"]).to.eq( pm.environment.get(\"user_id1\"));",
							"",
							"    pm.expect(pm.response.json()).to.have.property(\"self\");",
							"",
							"    const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "e206a8ca-0a71-4b70-8d8c-4b165edf7eec",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"weight\": 1000,\r\n\t\"content\": \"Toys1\"\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/loads/{{load1_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load1_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update load1-missing weight-400",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3b0836d7-edbc-4ba3-a506-2b0484760303",
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"404 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object is missing at least one of the required attributes\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "50532eab-23ab-4f62-96be-2ae4a68ac7b9",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"weight\": 1000\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/loads/{{load1_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load1_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update load1-missing content-400",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "45966e2c-0750-47cb-b189-734b9813e2ea",
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"404 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object is missing at least one of the required attributes\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "a28669c2-78da-4f50-a241-efdbb2f25c04",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"content\": \"Toys1\"\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/loads/{{load1_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load1_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update load1-missing body-400",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a4af56b2-d02a-4285-bc68-2f9b25e63bb9",
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"404 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object is missing at least one of the required attributes\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "143f1169-27f4-4d21-8a8b-c14bb5571423",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{app_url}}/loads/{{load1_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load1_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update load-invalid load id-404",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a457f060-e45d-4dcc-9cf9-cc2750cde772",
						"exec": [
							"pm.test(\"404 status code\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"404 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No load with this load_id exists\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "1235d888-3c3a-4ee7-9d30-388ba3454795",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"weight\": 1000,\r\n\t\"content\": \"Toys1\"\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/loads/{{invalid_load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{invalid_load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update load1 403 (user_id2)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "32b09815-77e9-4bdd-9ce3-7aa6a729948a",
						"exec": [
							"pm.test(\"403 status code\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"load owned by someone else\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "c841451f-2daf-490c-84ed-fc20c6921e5d",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"weight\": 1000,\r\n\t\"content\": \"Toys1\"\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/loads/{{load1_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load1_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update load1 no token 401",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b99a4250-1aa3-4f3b-9d7c-389d65646832",
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Missing or invalid JWT\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "e13f71db-65d6-4de5-83ad-5859aa61e5a4",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Odyssey11\",\r\n  \"type\": \"Yatch11\",\r\n  \"length\": 1110\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/loads/{{load1_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load1_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get boat1 200 with load1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "105a8f75-c666-491a-9a83-aca2d7f5fc57",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Odyssey1\");",
							"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Yatch1\");",
							"    pm.expect(pm.response.json()[\"length\"]).to.eq(10);",
							"    pm.expect(pm.response.json()[\"load\"]).to.eq( pm.environment.get(\"load1_id\"));",
							"",
							"    pm.expect(pm.response.json()).to.have.property(\"owner\");",
							"    pm.expect(pm.response.json().owner).to.eq( pm.environment.get(\"user_id1\") );",
							"",
							"    pm.expect(pm.response.json()).to.have.property(\"id\");",
							"    pm.expect(pm.response.json()).to.have.property(\"self\");",
							"",
							"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "a48c6850-d91b-4055-99fa-9e776e98efe5",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get boat2 200 with load2",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f978669e-761f-4acd-a935-51c8466672a7",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Odyssey Copy\");",
							"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Yatch\");",
							"    pm.expect(pm.response.json()[\"length\"]).to.eq(99);",
							"    pm.expect(pm.response.json()[\"load\"]).to.eq( pm.environment.get(\"load2_id\"));",
							"",
							"    pm.expect(pm.response.json()).to.have.property(\"owner\");",
							"    pm.expect(pm.response.json().owner).to.eq( pm.environment.get(\"user_id1\") );",
							"",
							"    pm.expect(pm.response.json()).to.have.property(\"id\");",
							"    pm.expect(pm.response.json()).to.have.property(\"self\");",
							"",
							"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "59ff3e05-a246-40e9-a980-b02f7673b475",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat2_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat2_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get boat3 user_id2 200 with load3",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2675f0d5-f83b-42fb-83cd-c4e914942b0f",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Odyssey2\");",
							"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Yatch2\");",
							"    pm.expect(pm.response.json()[\"length\"]).to.eq(12);",
							"    pm.expect(pm.response.json()[\"load\"]).to.eq( pm.environment.get(\"load3_id\") );",
							"",
							"    pm.expect(pm.response.json()).to.have.property(\"owner\");",
							"    pm.expect(pm.response.json().owner).to.eq( pm.environment.get(\"user_id2\") );",
							"",
							"    pm.expect(pm.response.json()).to.have.property(\"id\");",
							"    pm.expect(pm.response.json()).to.have.property(\"self\");",
							"",
							"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "3afa9e60-a042-4eaa-b897-1675e7eeb437",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat3_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat3_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get load1 with boat1 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ec6b157f-ea81-459f-bc04-eb9e49a399c2",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"content\"]).to.eq(\"Toys1\");",
							"    pm.expect(pm.response.json()[\"weight\"]).to.eq(1000);",
							"    pm.expect(pm.response.json()[\"carrier\"]).to.eq( pm.environment.get(\"boat_id\") );",
							"    pm.expect(pm.response.json()).to.have.property(\"createdAt\");",
							"    pm.expect(pm.response.json()).to.have.property(\"updatedAt\");",
							"",
							"    pm.expect(pm.response.json().createdAt).to.not.eq(pm.response.json().updatedAt);",
							"",
							"    pm.expect(pm.response.json()).to.have.property(\"id\");",
							"",
							"    pm.expect(pm.response.json()).to.have.property(\"owner\");",
							"    pm.expect(pm.response.json()[\"owner\"]).to.eq( pm.environment.get(\"user_id1\"));",
							"",
							"    pm.expect(pm.response.json()).to.have.property(\"self\");",
							"",
							"    const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "e4822583-511a-40d4-8217-c46d373853d3",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/loads/{{load1_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load1_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get load2 with boat2 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "beabd8a7-df78-4ee3-a292-afdc361bb15c",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"content\"]).to.eq(\"Toys\");",
							"    pm.expect(pm.response.json()[\"weight\"]).to.eq(101);",
							"    pm.expect(pm.response.json()[\"carrier\"]).to.eq( pm.environment.get(\"boat2_id\") );",
							"    pm.expect(pm.response.json()).to.have.property(\"createdAt\");",
							"    pm.expect(pm.response.json()).to.have.property(\"updatedAt\");",
							"",
							"    pm.expect(pm.response.json().createdAt).to.eq(pm.response.json().updatedAt);",
							"",
							"    pm.expect(pm.response.json()).to.have.property(\"id\");",
							"",
							"    pm.expect(pm.response.json()).to.have.property(\"owner\");",
							"    pm.expect(pm.response.json()[\"owner\"]).to.eq( pm.environment.get(\"user_id1\"));",
							"",
							"    pm.expect(pm.response.json()).to.have.property(\"self\");",
							"",
							"    const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "7926545d-4409-434d-9066-507addcd080e",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/loads/{{load2_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load2_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get load3 with boad3 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "42c29fa6-2e91-4c53-8390-8dfa7ae6f3bb",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"content\"]).to.eq(\"Dolls\");",
							"    pm.expect(pm.response.json()[\"weight\"]).to.eq(102);",
							"    pm.expect(pm.response.json()[\"carrier\"]).to.eq( pm.environment.get(\"boat3_id\") );",
							"    pm.expect(pm.response.json()).to.have.property(\"createdAt\");",
							"    pm.expect(pm.response.json()).to.have.property(\"updatedAt\");",
							"",
							"    pm.expect(pm.response.json().createdAt).to.eq(pm.response.json().updatedAt);",
							"",
							"    pm.expect(pm.response.json()).to.have.property(\"id\");",
							"",
							"    pm.expect(pm.response.json()).to.have.property(\"owner\");",
							"    pm.expect(pm.response.json()[\"owner\"]).to.eq( pm.environment.get(\"user_id2\"));",
							"",
							"    pm.expect(pm.response.json()).to.have.property(\"self\");",
							"",
							"    const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "84c5042c-1729-41b5-966d-e1b427c469b8",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/loads/{{load3_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load3_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update boat accept: application/text 406",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "12006373-add4-46f0-b4d1-e131961762e2",
						"exec": [
							"pm.test(\"406 status code\", function () {",
							"    pm.response.to.have.status(406);",
							"});",
							"",
							"pm.test(\"406 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Not Acceptable\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "78d05af0-98cb-47a6-9f23-ad6599f5534c",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "text/plain"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Odyssey\",\r\n  \"type\": \"Yatch\",\r\n  \"length\": 99\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Send XML (masked as json) to update boat 415",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f7f245a4-75fd-4eb0-9014-8dfe7eb94c0a",
						"exec": [
							"pm.test(\"415 status code\", function () {",
							"    pm.response.to.have.status(415);",
							"});",
							"",
							"pm.test(\"415 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Only Accept application/json\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "040228cd-c4a7-4278-b300-f1b5730e62c4",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\r\n<root>\r\n  <content>Odyssey</content>\r\n  <weight>99</weight>\r\n</root>",
					"options": {
						"raw": {
							"language": "xml"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{load1_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{load1_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update boat1 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e86d86dd-679e-4ec1-8386-96046ad68b01",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Odyssey\");",
							"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Yatch\");",
							"    pm.expect(pm.response.json()[\"length\"]).to.eq(10);",
							"    pm.expect(pm.response.json()[\"load\"]).to.eq( pm.environment.get(\"load1_id\"));",
							"",
							"    pm.expect(pm.response.json()).to.have.property(\"owner\");",
							"    pm.expect(pm.response.json().owner).to.eq( pm.environment.get(\"user_id1\") );",
							"",
							"    pm.expect(pm.response.json()).to.have.property(\"id\");",
							"    pm.expect(pm.response.json()).to.have.property(\"self\");",
							"",
							"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "71f4fe8b-cfa7-4f75-9126-e35c366b1715",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Odyssey\",\r\n  \"type\": \"Yatch\"\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update boat1-no body-400",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "16765a6b-307d-4db8-9f87-20470f87d0f1",
						"exec": [
							"pm.test(\"404 status code\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"404 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object is missing at least one of the required attributes\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "d4fc869f-f70b-4a26-94b1-9fb347d23b97",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update boat-invalid boat id-404",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a688c75d-1a12-46e7-adef-a87c08d47b0f",
						"exec": [
							"pm.test(\"404 status code\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"404 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No boat with this boat_id exists\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "9ae9e290-eeca-44a3-9cd5-61402c353ee9",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Odyssey\",\r\n  \"type\": \"Yatch\"\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats/{{invalid_boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{invalid_boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update boat1 -user_id2-403",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1565f9d0-a1ff-4176-9a9b-5ee5743e1377",
						"exec": [
							"pm.test(\"403 stats\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"pm.test(\"401 invalid jwt message\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Boat owned by someone else\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "9a3827bb-4b3f-45b0-9b88-33140b32d3b8",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Odyssey\",\r\n  \"type\": \"Yatch\"\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update boat1 -no token-401",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c1316a61-348f-4a6e-afc5-275f69c9a358",
						"exec": [
							"pm.test(\"401 stats\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"401 invalid jwt message\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Missing or invalid JWT\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "8b731066-d1fa-41c9-8014-9fdf5d5b376e",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Odyssey\",\r\n  \"type\": \"Yatch\"\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update boat1 -wron token-401",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "51690f10-422d-4691-983f-7794c43fdf75",
						"exec": [
							"pm.test(\"401 stats\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"401 invalid jwt message\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Missing or invalid JWT\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "828f5b16-0223-4900-9a57-e1535a6b3353",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{wrong_token}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Odyssey\",\r\n  \"type\": \"Yatch\"\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update boat2 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2a05abb2-6737-4a3e-a880-1e76e571cbc6",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    ",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Titanic\");",
							"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Yatch\");",
							"    pm.expect(pm.response.json()[\"length\"]).to.eq(108);",
							"    ",
							"    pm.expect(pm.response.json()[\"owner\"]).to.eq( pm.environment.get(\"user_id1\"));",
							"    ",
							"    pm.expect(pm.response.json()).to.have.property(\"id\");",
							"    pm.expect(pm.response.json()).to.have.property(\"self\");",
							"",
							"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							"pm.environment.set(\"boat2_id\", pm.response.json()[\"id\"]);",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "63d22344-7a03-46de-845e-8e42712f46d8",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Titanic\",\r\n  \"length\": 108\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat2_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat2_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update load1-accept:application/text-406",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "33a7fe7e-0fed-415b-8904-18b34a286d55",
						"exec": [
							"pm.test(\"406 status code\", function () {",
							"    pm.response.to.have.status(406);",
							"});",
							"",
							"pm.test(\"406 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Not Acceptable\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "2850d4fd-0b49-46ff-896f-06fb622b73f9",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "text/plain",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"weight\": 100\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/loads/{{load1_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load1_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Send XML (masked as json) to update boat 415 Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b025518a-8780-47d4-ab56-6d3a99bb63be",
						"exec": [
							"pm.test(\"415 status code\", function () {",
							"    pm.response.to.have.status(415);",
							"});",
							"",
							"pm.test(\"415 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Only Accept application/json\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "391f3bb1-e619-4707-81e7-6877ed9189aa",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\r\n<root>\r\n  <content>Odyssey</content>\r\n  <weight>99</weight>\r\n</root>",
					"options": {
						"raw": {
							"language": "xml"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/loads/{{load1_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load1_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update load1-invalid load id-404",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "84c15644-97dc-4c45-b92a-4303caacb794",
						"exec": [
							"pm.test(\"404 stats\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"404 invalid jwt message\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No load with this load_id exists\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "097d89a2-0c7b-456b-9056-ba29542e698b",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"weight\": 100\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/loads/{{invalid_load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{invalid_load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update load1-no content-400",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "91ed4b3c-8b82-4cf8-9775-ba92922bc0b2",
						"exec": [
							"pm.test(\"404 status code\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"404 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object is missing at least one of the required attributes\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "19285ede-134a-450d-9c61-ab71d5b36605",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/loads/{{load1_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load1_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update load1-no token-401",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e2930c3c-05c7-4863-80fa-1fdbdeee8a48",
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"404 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Missing or invalid JWT\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "5507d00c-78d8-44cd-8942-dd881d3ebe60",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"weight\": 100\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/loads/{{load1_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load1_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update load1-wrong token-401",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7d7a8e97-ff4b-4450-83cc-f9dc5d5269c3",
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"404 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Missing or invalid JWT\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "402c8233-05c4-4c2e-a31d-a52a1ee97de3",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{wrong_token}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"weight\": 100\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/loads/{{load1_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load1_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update load1-ownr2-403",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "80a77814-b136-462b-963c-61196c067e50",
						"exec": [
							"pm.test(\"403 status code\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"pm.test(\"404 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"load owned by someone else\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "ba7e2c2a-9434-40ae-a388-48bc2f84b954",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"weight\": 100\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/loads/{{load1_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load1_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update load1-weight-200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b13236ef-638c-416e-8a6c-bf7c79748d46",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"updatedAt has changed\", function () {",
							"    pm.expect(pm.response.json().createdAt).to.not.eq(pm.response.json().updatedAt);",
							"})",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"content\"]).to.eq(\"Toys1\");",
							"    pm.expect(pm.response.json()[\"weight\"]).to.eq(100);",
							"    pm.expect(pm.response.json()[\"carrier\"]).to.eq( pm.environment.get(\"boat_id\") );",
							"    pm.expect(pm.response.json()).to.have.property(\"createdAt\");",
							"    pm.expect(pm.response.json()).to.have.property(\"updatedAt\");",
							"",
							"    pm.expect(pm.response.json().createdAt).to.not.eq(pm.response.json().updatedAt);",
							"",
							"    pm.expect(pm.response.json()).to.have.property(\"id\");",
							"",
							"    pm.expect(pm.response.json()).to.have.property(\"owner\");",
							"    pm.expect(pm.response.json()[\"owner\"]).to.eq( pm.environment.get(\"user_id1\"));",
							"",
							"    pm.expect(pm.response.json()).to.have.property(\"self\");",
							"",
							"    const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "dd00306c-fc98-4664-ac23-d79c7ab728bb",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"weight\": 100\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/loads/{{load1_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load1_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update load1-content-200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ab4c6dc7-e4f9-480e-9304-3d10e0acb4ed",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"updatedAt has changed\", function () {",
							"    pm.expect(pm.response.json().createdAt).to.not.eq(pm.response.json().updatedAt);",
							"})",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"content\"]).to.eq(\"Toys\");",
							"    pm.expect(pm.response.json()[\"weight\"]).to.eq(100);",
							"    pm.expect(pm.response.json()[\"carrier\"]).to.eq( pm.environment.get(\"boat_id\") );",
							"    pm.expect(pm.response.json()).to.have.property(\"createdAt\");",
							"    pm.expect(pm.response.json()).to.have.property(\"updatedAt\");",
							"",
							"    pm.expect(pm.response.json().createdAt).to.not.eq(pm.response.json().updatedAt);",
							"",
							"    pm.expect(pm.response.json()).to.have.property(\"id\");",
							"",
							"    pm.expect(pm.response.json()).to.have.property(\"owner\");",
							"    pm.expect(pm.response.json()[\"owner\"]).to.eq( pm.environment.get(\"user_id1\"));",
							"",
							"    pm.expect(pm.response.json()).to.have.property(\"self\");",
							"",
							"    const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "4cdc0ba7-ce51-4e10-8b74-bd34c0407c26",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"content\": \"Toys\"\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/loads/{{load1_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load1_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "remove load in boat with invalid load id - 404",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "14a6f6c9-c9b2-4083-bc0c-28a53e0a3fc5",
						"exec": [
							"pm.test(\"404 status\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"401 invalid jwt message\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The specified boat and/or load don’t exist\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "ffbd5b6f-17db-4591-b801-845d3bf4d00b",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"weight\": 100,\r\n\t\"content\": \"Toys\"\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats/{{invalid_boat_id}}/load/{{load1_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{invalid_boat_id}}",
						"load",
						"{{load1_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "remove boat w/ invalid load but conflict- 409",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5bb625b6-93db-4afa-967e-d20b2d60fa74",
						"exec": [
							"pm.test(\"409 status\", function () {",
							"    pm.response.to.have.status(409);",
							"});",
							"",
							"pm.test(\"401 invalid jwt message\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Wrong load\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "d1fcb07a-d042-4af7-9c20-f71e78cdd3ba",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"weight\": 100,\r\n\t\"content\": \"Toys\"\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}/load/{{invalid_load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}",
						"load",
						"{{invalid_load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "remove load1 to boat1-no token-401",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "eb4dbe91-6313-4de0-bcf1-d88d5c843e03",
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"401 invalid jwt message\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Missing or invalid JWT\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "a6bd2453-69aa-4fba-9526-f6be223b15da",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"weight\": 100,\r\n\t\"content\": \"Toys\"\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}/load/{{load1_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}",
						"load",
						"{{load1_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "remove load1 to boat1 - 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b5bdd82b-8947-4b97-8d8c-bf43c5526a48",
						"exec": [
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "f4f4a1ab-bf0c-48b8-80bd-619bd5aee550",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"weight\": 100,\r\n\t\"content\": \"Toys\"\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}/load/{{load1_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}",
						"load",
						"{{load1_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "remove load1 to from empty boat - 409",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "600d0417-ec7a-408a-a21b-76ff6a799905",
						"exec": [
							"pm.test(\"409 status code\", function () {",
							"    pm.response.to.have.status(409);",
							"});",
							"",
							"pm.test(\"401 invalid jwt message\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The boat's load is empty\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "c89b8b78-4fd1-43fd-9ef4-08f367e08550",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"weight\": 100,\r\n\t\"content\": \"Toys\"\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}/load/{{load1_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}",
						"load",
						"{{load1_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get boat1 200 with no load & update",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "da0d8f87-5d5b-4c8f-af7d-3b562e8523e6",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Odyssey\");",
							"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Yatch\");",
							"    pm.expect(pm.response.json()[\"length\"]).to.eq(10);",
							"    pm.expect(pm.response.json()[\"load\"]).to.eq( null );",
							"",
							"    pm.expect(pm.response.json()).to.have.property(\"owner\");",
							"    pm.expect(pm.response.json().owner).to.eq( pm.environment.get(\"user_id1\") );",
							"",
							"    pm.expect(pm.response.json()).to.have.property(\"id\");",
							"    pm.expect(pm.response.json()).to.have.property(\"self\");",
							"",
							"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "1a6fa743-f3d9-4282-9e75-0ca2f5c38461",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get boat2 200 with load2 & update",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "93aa43fc-c442-4996-abd3-975278472ceb",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Titanic\");",
							"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Yatch\");",
							"    pm.expect(pm.response.json()[\"length\"]).to.eq(108);",
							"    pm.expect(pm.response.json()[\"load\"]).to.eq( pm.environment.get(\"load2_id\"));",
							"",
							"    pm.expect(pm.response.json()).to.have.property(\"owner\");",
							"    pm.expect(pm.response.json().owner).to.eq( pm.environment.get(\"user_id1\") );",
							"",
							"    pm.expect(pm.response.json()).to.have.property(\"id\");",
							"    pm.expect(pm.response.json()).to.have.property(\"self\");",
							"",
							"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "6ce067ec-3e4d-4f0f-9397-d96c4e22c6b5",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat2_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat2_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add load1 to boat1 - 204",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "037e25e8-1897-429a-8bec-0239515fa9d6",
						"exec": [
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "1388336b-984b-4dcd-aed9-97de298ca1b3",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"weight\": 100,\r\n\t\"content\": \"Toys\"\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}/load/{{load1_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}",
						"load",
						"{{load1_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get boat1 200 withload & update",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fdff21df-4657-4668-a634-867979983496",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Odyssey\");",
							"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Yatch\");",
							"    pm.expect(pm.response.json()[\"length\"]).to.eq(10);",
							"    pm.expect(pm.response.json()[\"load\"]).to.eq( pm.environment.get(\"load1_id\") );",
							"",
							"    pm.expect(pm.response.json()).to.have.property(\"owner\");",
							"    pm.expect(pm.response.json().owner).to.eq( pm.environment.get(\"user_id1\") );",
							"",
							"    pm.expect(pm.response.json()).to.have.property(\"id\");",
							"    pm.expect(pm.response.json()).to.have.property(\"self\");",
							"",
							"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "51587b0a-ce0c-4804-a25c-a885df6c882b",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get load1 200 with boat & updates",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4341babd-3217-41d3-a8aa-9ecae6d9557a",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"content\"]).to.eq(\"Toys\");",
							"    pm.expect(pm.response.json()[\"weight\"]).to.eq(100);",
							"    pm.expect(pm.response.json()[\"carrier\"]).to.eq( pm.environment.get(\"boat_id\"));",
							"    pm.expect(pm.response.json()).to.have.property(\"createdAt\");",
							"    pm.expect(pm.response.json()).to.have.property(\"updatedAt\");",
							"",
							"    pm.expect(pm.response.json().createdAt).to.not.eq(pm.response.json().updatedAt);",
							"",
							"    pm.expect(pm.response.json()).to.have.property(\"id\");",
							"",
							"    pm.expect(pm.response.json()).to.have.property(\"owner\");",
							"    pm.expect(pm.response.json()[\"owner\"]).to.eq( pm.environment.get(\"user_id1\"));",
							"",
							"    pm.expect(pm.response.json()).to.have.property(\"self\");",
							"",
							"    const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "2324ac3c-455b-486e-8b18-ba607f47d1fa",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/loads/{{load1_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load1_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete boat1-no token [401]",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7d09f899-5343-4637-b780-d954dad2568a",
						"exec": [
							"pm.test(\"401 invalid jwt\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"401 invalid jwt message\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Missing or invalid JWT\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "e56fd33b-b8dd-4ac3-9ab0-f1aa514cbd36",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete boat wrong owner 403",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1e8adcd9-425b-4752-ada4-d72bc1f2da92",
						"exec": [
							"pm.test(\"403 status\", function () {\r",
							"    pm.response.to.have.status(403);\r",
							"});\r",
							"\r",
							"pm.test(\"401 invalid jwt message\", function () {\r",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Boat owned by someone else\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "b164cf70-2603-4c2a-9588-9b67108cdaa5",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete invalid boat 404",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a1cae515-bdd0-42a6-bc7c-8ad64ad97f7c",
						"exec": [
							"pm.test(\"404 status\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"404 invalid jwt message\", function () {\r",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No boat with this boat_id exists\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "5cb7fba8-4ddf-4f9c-a75a-d66ae779ed50",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{invalid_boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{invalid_boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete boat1 204",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "25caa701-7ffc-423c-8cf0-52dcb7e920fe",
						"exec": [
							"pm.test(\"204 no content\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "e54824fd-4434-4857-a0b8-fc08dcf48ad4",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "try to delete boat1 again 404",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fc59b93a-9ec2-45ae-b84a-6c447635e8f3",
						"exec": [
							"pm.test(\"404 status\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"404 invalid jwt message\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No boat with this boat_id exists\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "b7742a8f-0314-4d4f-9d4d-18fad391e5e7",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get load1 200 w/ no boat1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b7f33782-4e3a-4ff0-aa3e-020f83e543c6",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"content\"]).to.eq(\"Toys\");",
							"    pm.expect(pm.response.json()[\"weight\"]).to.eq(100);",
							"    pm.expect(pm.response.json()[\"carrier\"]).to.eq(null);",
							"    pm.expect(pm.response.json()).to.have.property(\"createdAt\");",
							"    pm.expect(pm.response.json()).to.have.property(\"updatedAt\");",
							"",
							"    pm.expect(pm.response.json()).to.have.property(\"id\");",
							"",
							"    pm.expect(pm.response.json()).to.have.property(\"owner\");",
							"    pm.expect(pm.response.json()[\"owner\"]).to.eq( pm.environment.get(\"user_id1\"));",
							"",
							"    pm.expect(pm.response.json()).to.have.property(\"self\");",
							"",
							"    const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "8ae62fbd-9514-4ac5-a6c8-a40f09a2c4e5",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/loads/{{load1_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load1_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete load3 204",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8441f717-5cc3-4a98-87df-6bdc1b0cb42c",
						"exec": [
							"pm.test(\"204 no content\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "51da9426-7e2e-499f-ae0b-0e81d24ff377",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads/{{load3_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load3_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get boat3 user_id2 with no load3 - 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ecd9820c-fc1a-4bfa-94a6-983836451ce0",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Odyssey2\");",
							"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Yatch2\");",
							"    pm.expect(pm.response.json()[\"length\"]).to.eq(12);",
							"    pm.expect(pm.response.json()[\"load\"]).to.eq( null );",
							"",
							"    pm.expect(pm.response.json()).to.have.property(\"owner\");",
							"    pm.expect(pm.response.json().owner).to.eq( pm.environment.get(\"user_id2\") );",
							"",
							"    pm.expect(pm.response.json()).to.have.property(\"id\");",
							"    pm.expect(pm.response.json()).to.have.property(\"self\");",
							"",
							"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "0eb8d1b4-be41-444e-acbe-55242a8fa564",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat3_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat3_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete boat2 204",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4509a78c-8d11-4754-9f88-bdb3e733b680",
						"exec": [
							"pm.test(\"204 no content\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "b69751e9-3968-4f9d-a641-b82a5e7035f7",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat2_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat2_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete boat3 (user_id2) 204",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5c0ef1ab-c15c-47d4-aa56-d5079d9c6a51",
						"exec": [
							"pm.test(\"204 no content\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "4b30d737-9f48-4108-8885-2a84dd3ee8f6",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat3_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat3_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete boat4 204",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5b6a3946-b4ac-43cc-a41b-39cc018893c7",
						"exec": [
							"pm.test(\"204 no content\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "5d984b83-0daa-4011-ad83-6ed7a11a9d0d",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat4_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat4_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete boat5 204",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "6e56c507-115a-46e3-921f-46a4c92057aa",
						"exec": [
							"pm.test(\"204 no content\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "af66f94e-f296-41e9-975e-b33e3f7e25f3",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat5_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat5_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete boat6 204",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9072b28e-fce9-49e6-b1ad-d845272a677c",
						"exec": [
							"pm.test(\"204 no content\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "3f555d6a-6adc-4607-9da4-7886790ad5cd",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat6_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat6_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete boat7 204",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fd394ad0-82b3-4edb-a0d8-ebd7ea38ae59",
						"exec": [
							"pm.test(\"204 no content\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "440f2c9c-d359-4636-9f69-c8dd5b8fa681",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat7_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat7_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete missing boat1 404",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8aaf8e0c-8b05-40bd-95a4-f7477f1a4ed3",
						"exec": [
							"pm.test(\"404 status\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"404 invalid jwt message\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No boat with this boat_id exists\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "bfdf1d3f-18b8-4348-bba8-e053fcd7b343",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete load1-no token [401]",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5e221f72-8bf3-47db-b703-606e140753ef",
						"exec": [
							"pm.test(\"401 invalid jwt\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"401 invalid jwt message\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Missing or invalid JWT\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "c8aeec70-51e8-49c1-81f8-7f5ea279f656",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads/{{load1_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load1_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete load1-wrong token [401]",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "6c7c5313-2212-4b83-b485-753b838d6673",
						"exec": [
							"pm.test(\"401 invalid jwt\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"401 invalid jwt message\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Missing or invalid JWT\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "58e90bde-b5c3-4744-ab3a-f17948e24173",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{wrong_token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads/{{load1_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load1_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete load wrong owner 403",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ff7fe27f-4a1d-47f1-b429-0fbe1cdb6f0e",
						"exec": [
							"pm.test(\"403 status\", function () {\r",
							"    pm.response.to.have.status(403);\r",
							"});\r",
							"\r",
							"pm.test(\"401 invalid jwt message\", function () {\r",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Load owned by someone else\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "677b0b8f-6e71-4695-b510-9e6dd577f338",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads/{{load1_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load1_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete load1 204",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f3cfaa2d-7a1b-472e-a330-0c4afacce9e3",
						"exec": [
							"pm.test(\"204 no content\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "03c203ec-ad90-4760-aac1-8ec990404cd9",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads/{{load1_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load1_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "try to delete load1 again 404",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c4f82394-9d47-4160-a9f4-7b954e15e11d",
						"exec": [
							"pm.test(\"404 status\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"401 invalid jwt message\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No load with this load_id exists\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "d861f779-db90-4129-8a64-2c47f37f243d",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads/{{load1_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load1_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete load2 204",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c92c0696-88bc-4fbc-9541-16e917a377db",
						"exec": [
							"pm.test(\"204 no content\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "d3df248b-cd05-41db-b0a6-e115f653fad4",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads/{{load2_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load2_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete load4 204",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4bbafdc9-682f-49aa-8707-36ab0053818a",
						"exec": [
							"pm.test(\"204 no content\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "5f3c39dd-6823-477d-886b-4359a6efb7f8",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads/{{load4_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load4_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete load5 204",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "6c129b4f-0e44-4327-86af-2667686de29a",
						"exec": [
							"pm.test(\"204 no content\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "453b35e5-5d35-483a-b813-9d08a52f1598",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads/{{load5_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load5_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete load6 204",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b6167adc-6b04-48bb-9c53-42f998bc0716",
						"exec": [
							"pm.test(\"204 no content\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "1c61a058-6cf6-4871-b344-e5ee88189c95",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads/{{load6_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load6_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete load7 204",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "90a14784-0ee7-4954-a9f8-ebc2e55b16e4",
						"exec": [
							"pm.test(\"204 no content\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "c6dd8263-f5c3-40ae-8cee-e075fc3e0711",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads/{{load7_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load7_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get boat1 404",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7bbad441-fb8e-4ee0-a4e3-bb343085f797",
						"exec": [
							"pm.test(\"404 status code\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No boat with this boat_id exists\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "671a46b4-6f7f-4d12-9629-a51210997403",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get load1 404",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2cc19e15-8ca9-48c0-8285-6906b5d91b9c",
						"exec": [
							"pm.test(\"404 status code\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"404 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No load with this load_id exists\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "154445ee-24dd-4b1b-a9bc-20e1041f7af3",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/loads/{{load1_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load1_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get boats - user_id1 count decreased - 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ff335873-e916-4aa9-b928-c091e8bd83a6",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Content is Type JSON\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"count decreased by 6 was provided\", function () {",
							"    var results = pm.response.json();",
							"    pm.expect(results).to.have.property('total');",
							"    var new_total = results.total;",
							"    var old_total = pm.environment.get(\"boats_count_user_id1\");",
							"",
							"    var diff = old_total - 6;",
							"    if (diff < 0)",
							"        diff = 0;",
							"    pm.expect(new_total).to.be.eq(diff);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "0d15167e-bf6b-463b-b781-cf8e42d7ad09",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "get boats - user_id2 count decreased - 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e686fd71-7576-4bb2-87e3-5c250111c78b",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Content is Type JSON\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"count decreased by 1\", function () {",
							"    var results = pm.response.json();",
							"    pm.expect(results).to.have.property('total');",
							"    var new_total = results.total;",
							"    var old_total = pm.environment.get(\"boats_count_user_id2\");",
							"",
							"    var diff = old_total - 1;",
							"    if (diff < 0)",
							"        diff = 0;",
							"    pm.expect(new_total).to.be.eq(diff);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "c982d05a-bddf-45cb-88f2-c7df89cd32fc",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "get loads- user_id1 count decreased - 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "256463a4-f466-48d3-aa18-04a067ec4a15",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Content is Type JSON\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"count decreased by 6\", function () {",
							"    var results = pm.response.json();",
							"    pm.expect(results).to.have.property('total');",
							"    var new_total = results.total;",
							"    var old_total = pm.environment.get(\"loads_count_user_id1\");",
							"",
							"    var diff = old_total - 6;",
							"    if (diff < 0)",
							"        diff = 0;",
							"    pm.expect(new_total).to.be.eq(diff);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "330458d0-47bf-44dc-8aa9-4878f301e8d4",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads"
					]
				}
			},
			"response": []
		},
		{
			"name": "get loads- user_id2 count decreased - 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "187cb3b1-570f-4b3e-b212-43ed69dee94c",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Content is Type JSON\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"count decreased by 1\", function () {",
							"    var results = pm.response.json();",
							"    pm.expect(results).to.have.property('total');",
							"    var new_total = results.total;",
							"    var old_total = pm.environment.get(\"loads_count_user_id2\");",
							"",
							"    var diff = old_total - 1;",
							"    if (diff < 0)",
							"        diff = 0;",
							"    pm.expect(new_total).to.be.eq(diff);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "04defa9d-9ea5-49e0-8225-723f462bd9cc",
						"exec": [
							"setTimeout(function(){}, pm.environment.get(\"requests_delay\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "99113605-735d-4708-8db5-4ad2974acaf5",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "0147a6ea-a2fa-43bf-93d4-5ee9b36b57e1",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}